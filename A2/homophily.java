//University of Victoria
//Samuel Navarrete
//CSC485 A2 Q1

import java.io.File; 
import java.io.FileNotFoundException; 
import java.util.*;

public class homophily{

	private static final float MALE = 0; 
	private static final float FEMALE = 1; 

	//Parses a file with a graph in .csv format and generates an adjacency list
	public static float[][] parseFiles(String graph_file, String gender_file)
	{
		File grphfile = new File(graph_file);
		File gndrfile = new File(gender_file);
		float[][] graph; 
		int size = 0; 

		try{
			Scanner sc_graph = new Scanner(grphfile); 
			Scanner sc_gender = new Scanner(gndrfile); 

			String line = sc_graph.nextLine(); 

			//First line of the CSV files generated by Gephi
			//contain a list of all the nodes
			String[] nodelist = line.split(";");
			size = nodelist.length-1; //graph size = # of nodes


			//To store the graph
			graph = new float[size][size+1];

			for(int i = 0; i < size; i++)
			{
				line = sc_graph.nextLine(); 
				String[] nodes = line.split(";");

				for(int j = 0; j < size; j++)
				{
					graph[i][j] = Float.parseFloat(nodes[j+1]); 
				}
			}

			line = sc_gender.nextLine();
			for(int i = 0; i < size; i++){
				line = sc_gender.nextLine();
				String[] attr = line.split(",");
				if(attr[1].equals("male")){
					graph[i][size] = MALE; 
				}
				else if(attr[1].equals("female")){
					graph[i][size] = FEMALE; 
				}
				else{
					graph[i][size] = -1; 
				}
			}
		}

		catch (FileNotFoundException e)
		{
			graph = null; 
			System.out.println("File IO Error: could not read file");
		}

		return graph; 
	}


	public static int getHomoPhily(float[][] graph)
	{
		int size = graph[0].length-1; 
		int result = 0; 
		int male_count = 0; 
		int female_count = 0; 

		for(int i = 0; i < size; i++){
			if(graph[i][size] == 0){
				male_count++; 
			}
			else if(graph[i][size] == 1){
				female_count++; 
			}
		}

		int total = male_count+female_count; 
		float male_percent = male_count/(float)total;
		float female_percent = female_count/(float)total; 
		float cg_expected = 2*male_percent*female_percent; 
		float total_edge = 0 ; 
		float cg_percent = 0; 

		System.out.println("Cross gender fraction expected: " + cg_expected); 

		float cg_count = 0; 
		for(int i = 0; i < size; i++){
			for(int j = 0; j < size; j++){

				//check if nodes adjacent 
				if(graph[i][j] == 1){
					if((graph[i][size] != -1) && (graph[j][size] != -1)){
						//check for cross gender edge
						if(graph[i][size] != graph[j][size]) {
							cg_count++;  //add cross gender count 
						}

					total_edge++;
					}
				}
			}
		}

		cg_percent = cg_count/total_edge; 

		System.out.println("fraction of crossgender: " + cg_percent); 
		return result; 
	}

	public static void main(String[] args)
	{
		String graph_file;  //Path of file to open
		String gender_file;
		float[][] graph;  //Adjacency matrix of graph

		//User Input
		if(args.length < 1){
			Scanner in = new Scanner(System.in);
			System.out.println("Enter path of graph .csv file: ");
			graph_file = in.nextLine(); 
			System.out.println("Enter path of gender .csv file: ");
			gender_file = in.nextLine(); 
		}
		else{
			graph_file = args[0];
			gender_file = args[1];
		}

		//Generate Adjacency Matrix of graph from file
		if((graph = parseFiles(graph_file, gender_file)) == null){
			System.out.println("Error parsing file, aborting.");
			return; 
		} 
		
		getHomoPhily(graph); 
	}
}